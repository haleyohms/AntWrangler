source(functionsPath)
functionsPath = "C:/Users/HaleyOhms/Documents/GitHub/CaRmel/FieldDuplicateTagCheck.r"
source(functionsPath)
dbDir = "C:/Users/HaleyOhms/Documents/Carmel/DATA/Database/AllFishData.csv"
# Main fish data file
AFD<-read_csv(dbDir, col_names = T,
col_types = cols(SiteID = "c", Date = col_date(), Pass = "d", FishNum = "d",
FL_mm = "d", Wt_g = "d", PITnum = "c", Recap = col_logical(),
TagSize = "i", DNAsamp = col_logical(), Notes = "c", SiteTo = "c",
Scales = "l", Species = "c", Sex = "c"))
dataDir = "C:/Users/HaleyOhms/Documents/Carmel/Fieldwork docs/PopSurveyFieldCode"
# Compile new data
dir = dataDir
files = list.files(dir, '*.xlsx', recursive = F, full.names = TRUE)
bnames = basename(files)
bnames = sub('.xlsx', '',bnames)
for(i in 1:length(files)){
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character", "character", "character"),
stringsAsFactors=FALSE)
if(i == 1){
fallpop = tbl
} else{
fallpop = rbind(fallpop, tbl)
}
}
View(tbl)
# Compile new data
dir = dataDir
files = list.files(dir, '*.xlsx', recursive = F, full.names = TRUE)
bnames = basename(files)
bnames = sub('.xlsx', '',bnames)
for(i in 1:length(files)){
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character", "character", "character"),
stringsAsFactors=FALSE)
if(i == 1){
fallpop = tbl
} else{
fallpop = rbind(fallpop, tbl)
}
}
dir = dataDir
files = list.files(dir, '*.xlsx', recursive = F, full.names = TRUE)
bnames = basename(files)
bnames = sub('.xlsx', '',bnames)
for(i in 1:length(files)){
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character", "character", "character"),
stringsAsFactors=FALSE)
if(i == 1){
fallpop = tbl
} else{
fallpop = rbind(fallpop, tbl)
}
}
dir = dataDir
files = list.files(dir, '*.xlsx', recursive = F, full.names = TRUE)
bnames = basename(files)
bnames = sub('.xlsx', '',bnames)
for(i in 1:length(files)){
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character",
"character", "character", "character"),
stringsAsFactors=FALSE)
if(i == 1){
fallpop = tbl
} else{
fallpop = rbind(fallpop, tbl)
}
}
colnames(fallpop) <- c("SiteID", "Date", "FishNum", "Pass", "FL_mm", "Wt_g", "PITnum", "TagSize", "TagorNot",
"DNAsamp", "Scales", "Recap","Species", "Notes")
View(fallpop)
dir = dataDir
files = list.files(dir, '*.xlsx', recursive = F, full.names = TRUE)
bnames = basename(files)
bnames = sub('.xlsx', '',bnames)
for(i in 1:length(files)){
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character",
"character", "character", "character"),
stringsAsFactors=FALSE)
if(i == 1){
fallpop = tbl
} else{
fallpop = rbind(fallpop, tbl)
}
}
colnames(fallpop) <- c("SiteID", "Date", "FishNum", "Pass", "FL_mm", "Wt_g", "PITnum", "TagSize", "TagorNot",
"DNAsamp", "Scales", "Recap","Species", "Notes")
View(AFD)
# Compile new data
dir = dataDir
files = list.files(dir, '*.xlsx', recursive = F, full.names = TRUE)
bnames = basename(files)
bnames = sub('.xlsx', '',bnames)
for(i in 1:length(files)){
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character",
"character", "character", "character"),
stringsAsFactors=FALSE)
if(i == 1){
fallpop = tbl
} else{
fallpop = rbind(fallpop, tbl)
}
}
colnames(fallpop) <- c("SiteID", "Date", "FishNum", "Pass", "FL_mm", "Wt_g", "PITnum", "TagSize", "TagorNot",
"DNAsamp", "Scales", "Recap","Species", "Notes")
# fallpop<-fallpop[!fallpop$SiteID=="" , ] #remove blank columns; thanks excel... not
# fallpop<-fallpop[!fallpop$SiteID==" " , ]
fallpop$DNAsamp <- fallpop$DNAsamp=="Y" | fallpop$DNAsamp=="T"
fallpop$Scales <- fallpop$Scales=="Y" | fallpop$Scales=="T"
fallpop$Recap <- fallpop$Recap=="Y" | fallpop$Recap=="T"
fallpop$Sex<-NA
fallpop$SiteTo<-NA
fallpop$TagSize <- as.integer(fallpop$TagSize)
fallpop$PITnum = as.character(sub(" ", "", fallpop[,"PITnum"])) # Remove space from PITnum
#... Clean up tag numbers
fallpop$PITnum[fallpop$PITnum=="NaN"] <- NA
fallpop$PITnum[fallpop$PITnum==""] <- NA
##... print first 6 lines of fall pop, confirm code is working
head(fallpop)
# Compile new data
dir = dataDir
files = list.files(dir, '*.xlsx', recursive = F, full.names = TRUE)
bnames = basename(files)
bnames = sub('.xlsx', '',bnames)
for(i in 1:length(files)){
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character",
"character", "character", "character"),
stringsAsFactors=FALSE)
if(i == 1){
fallpop = tbl
} else{
fallpop = rbind(fallpop, tbl)
}
}
colnames(fallpop) <- c("SiteID", "Date", "FishNum", "Pass", "FL_mm", "Wt_g", "PITnum", "TagSize", "TagorNot",
"DNAsamp", "Scales", "Recap","Species", "Notes")
# fallpop<-fallpop[!fallpop$SiteID=="" , ] #remove blank columns; thanks excel... not
# fallpop<-fallpop[!fallpop$SiteID==" " , ]
fallpop$DNAsamp <- fallpop$DNAsamp=="Y" | fallpop$DNAsamp=="T"
fallpop$Scales <- fallpop$Scales=="Y" | fallpop$Scales=="T"
fallpop$Recap <- fallpop$Recap=="Y" | fallpop$Recap=="T"
fallpop$Sex<-NA
fallpop$SiteTo<-NA
fallpop$TagSize <- as.integer(fallpop$TagSize)
fallpop$PITnum = as.character(sub(" ", "", fallpop[,"PITnum"])) # Remove space from PITnum
#... Clean up tag numbers
fallpop$PITnum[fallpop$PITnum=="NaN"] <- NA
fallpop$PITnum[fallpop$PITnum==""] <- NA
##... print first 6 lines of fall pop, confirm code is working
head(fallpop)
#... Bind with main data file
AFD <- rbind(AFD, fallpop)
names(AFD)
# Compile new data
dir = dataDir
files = list.files(dir, '*.xlsx', recursive = F, full.names = TRUE)
bnames = basename(files)
bnames = sub('.xlsx', '',bnames)
for(i in 1:length(files)){
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character",
"character", "character", "character"),
stringsAsFactors=FALSE)
if(i == 1){
fallpop = tbl
} else{
fallpop = rbind(fallpop, tbl)
}
}
colnames(fallpop) <- c("SiteID", "Date", "FishNum", "Pass", "FL_mm", "Wt_g", "PITnum", "TagSize",
"DNAsamp", "Scales", "Recap","Species", "Notes")
# fallpop<-fallpop[!fallpop$SiteID=="" , ] #remove blank columns; thanks excel... not
# fallpop<-fallpop[!fallpop$SiteID==" " , ]
fallpop$DNAsamp <- fallpop$DNAsamp=="Y" | fallpop$DNAsamp=="T"
fallpop$Scales <- fallpop$Scales=="Y" | fallpop$Scales=="T"
fallpop$Recap <- fallpop$Recap=="Y" | fallpop$Recap=="T"
fallpop$Sex<-NA
fallpop$SiteTo<-NA
fallpop$TagSize <- as.integer(fallpop$TagSize)
fallpop$PITnum = as.character(sub(" ", "", fallpop[,"PITnum"])) # Remove space from PITnum
#... Clean up tag numbers
fallpop$PITnum[fallpop$PITnum=="NaN"] <- NA
fallpop$PITnum[fallpop$PITnum==""] <- NA
##... print first 6 lines of fall pop, confirm code is working
head(fallpop)
View(fallpop)
functionsPath = "C:/Users/HaleyOhms/Documents/GitHub/CaRmel/FieldDuplicateTagCheck.r"
dbDir = "C:/Users/HaleyOhms/Documents/Carmel/DATA/Database/AllFishData.csv"
dataDir = "C:/Users/HaleyOhms/Documents/Carmel/Fieldwork docs/PopSurveyFieldCode"
# Main fish data file
AFD<-read_csv(dbDir, col_names = T,
col_types = cols(SiteID = "c", Date = col_date(), Pass = "d", FishNum = "d",
FL_mm = "d", Wt_g = "d", PITnum = "c", Recap = col_logical(),
TagSize = "i", DNAsamp = col_logical(), Notes = "c", SiteTo = "c",
Scales = "l", Species = "c", Sex = "c"))
# Compile new data
dir = dataDir
files = list.files(dir, '*.xlsx', recursive = F, full.names = TRUE)
bnames = basename(files)
bnames = sub('.xlsx', '',bnames)
for(i in 1:length(files)){
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character",
"character", "character", "character"),
stringsAsFactors=FALSE)
if(i == 1){
fallpop = tbl
} else{
fallpop = rbind(fallpop, tbl)
}
}
colnames(fallpop) <- c("SiteID", "Date", "FishNum", "Pass", "FL_mm", "Wt_g", "PITnum", "TagSize",
"DNAsamp", "Scales", "Recap","Species", "Notes")
# fallpop<-fallpop[!fallpop$SiteID=="" , ] #remove blank columns; thanks excel... not
# fallpop<-fallpop[!fallpop$SiteID==" " , ]
fallpop$DNAsamp <- fallpop$DNAsamp=="Y" | fallpop$DNAsamp=="T"
fallpop$Scales <- fallpop$Scales=="Y" | fallpop$Scales=="T"
fallpop$Recap <- fallpop$Recap=="Y" | fallpop$Recap=="T"
fallpop$Sex<-NA
fallpop$SiteTo<-NA
fallpop$TagSize <- as.integer(fallpop$TagSize)
fallpop$PITnum = as.character(sub(" ", "", fallpop[,"PITnum"])) # Remove space from PITnum
#... Clean up tag numbers
fallpop$PITnum[fallpop$PITnum=="NaN"] <- NA
fallpop$PITnum[fallpop$PITnum==""] <- NA
##... print first 6 lines of fall pop, confirm code is working
head(fallpop)
names(AFD)
# Compile new data
dir = dataDir
files = list.files(dir, '*.xlsx', recursive = F, full.names = TRUE)
bnames = basename(files)
bnames = sub('.xlsx', '',bnames)
for(i in 1:length(files)){
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character",
"character", "character"),
stringsAsFactors=FALSE)
if(i == 1){
fallpop = tbl
} else{
fallpop = rbind(fallpop, tbl)
}
}
colnames(fallpop) <- c("SiteID", "Date", "FishNum", "Pass", "FL_mm", "Wt_g", "PITnum", "TagSize",
"DNAsamp", "Scales", "Recap","Species", "Notes")
# fallpop<-fallpop[!fallpop$SiteID=="" , ] #remove blank columns; thanks excel... not
# fallpop<-fallpop[!fallpop$SiteID==" " , ]
fallpop$DNAsamp <- fallpop$DNAsamp=="Y" | fallpop$DNAsamp=="T"
fallpop$Scales <- fallpop$Scales=="Y" | fallpop$Scales=="T"
fallpop$Recap <- fallpop$Recap=="Y" | fallpop$Recap=="T"
fallpop$Sex<-NA
fallpop$SiteTo<-NA
fallpop$TagSize <- as.integer(fallpop$TagSize)
fallpop$PITnum = as.character(sub(" ", "", fallpop[,"PITnum"])) # Remove space from PITnum
#... Clean up tag numbers
fallpop$PITnum[fallpop$PITnum=="NaN"] <- NA
fallpop$PITnum[fallpop$PITnum==""] <- NA
##... print first 6 lines of fall pop, confirm code is working
head(fallpop)
dir = dataDir
files = list.files(dir, '*.xlsx', recursive = F, full.names = TRUE)
bnames = basename(files)
bnames = sub('.xlsx', '',bnames)
for(i in 1:length(files)){
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character",
"character", "character"),
stringsAsFactors=FALSE)
if(i == 1){
fallpop = tbl
} else{
fallpop = rbind(fallpop, tbl)
}
}
colnames(fallpop) <- c("SiteID", "Date", "FishNum", "Pass", "FL_mm", "Wt_g", "PITnum", "TagSize",
"DNAsamp", "Scales", "Recap","Species", "Notes")
head(fallpop)
dir = dataDir
files = list.files(dir, '*.xlsx', recursive = F, full.names = TRUE)
bnames = basename(files)
bnames = sub('.xlsx', '',bnames)
for(i in 1:length(files)){
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character",
"character", "character"),
stringsAsFactors=FALSE)
if(i == 1){
fallpop = tbl
} else{
fallpop = rbind(fallpop, tbl)
}
}
colnames(fallpop) <- c("SiteID", "Date", "FishNum", "Pass", "FL_mm", "Wt_g", "PITnum", "TagSize",
"DNAsamp", "Scales", "Recap","Species", "Notes")
head(fallpop)
dir = dataDir
files = list.files(dir, '*.xlsx', recursive = F, full.names = TRUE)
bnames = basename(files)
bnames = sub('.xlsx', '',bnames)
for(i in 1:length(files)){
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character",
"character", "character"),
stringsAsFactors=FALSE)
if(i == 1){
fallpop = tbl
} else{
fallpop = rbind(fallpop, tbl)
}
}
colnames(fallpop) <- c("SiteID", "Date", "FishNum", "Pass", "FL_mm", "Wt_g", "PITnum", "TagSize",
"DNAsamp", "Scales", "Recap","Species", "Notes")
head(fallpop)
# fallpop<-fallpop[!fallpop$SiteID=="" , ] #remove blank columns; thanks excel... not
# fallpop<-fallpop[!fallpop$SiteID==" " , ]
fallpop$DNAsamp <- fallpop$DNAsamp=="Y" | fallpop$DNAsamp=="T"
fallpop$Scales <- fallpop$Scales=="Y" | fallpop$Scales=="T"
fallpop$Recap <- fallpop$Recap=="Y" | fallpop$Recap=="T"
fallpop$Sex<-NA
fallpop$SiteTo<-NA
fallpop$TagSize <- as.integer(fallpop$TagSize)
fallpop$PITnum = as.character(sub(" ", "", fallpop[,"PITnum"])) # Remove space from PITnum
#... Clean up tag numbers
fallpop$PITnum[fallpop$PITnum=="NaN"] <- NA
fallpop$PITnum[fallpop$PITnum==""] <- NA
##... print first 6 lines of fall pop, confirm code is working
head(fallpop)
#... Bind with main data file
AFD <- rbind(AFD, fallpop)
##... print first 6 lines of AFD, confirm code is working
head(AFD)
#... Check for and return duplicates
Tdat <- filter(AFD, Recap==F, !is.na(PITnum)) #Non-recaps
dupTags <- Tdat[which(duplicated(Tdat$PITnum)==T) , ]
idx <- duplicated(Tdat$PITnum) | duplicated(Tdat$PITnum, fromLast = TRUE)
##... print the duplicates
Tdat[idx, ]
View(dupTags)
#... Check for and return duplicates
Tdat <- filter(AFD, Recap==F, !is.na(PITnum)) #Non-recaps
dupTags <- Tdat[which(duplicated(Tdat$PITnum)==T) , ]
View(dupTags)
idx <- duplicated(Tdat$PITnum) | duplicated(Tdat$PITnum, fromLast = TRUE)
##... print the duplicates
Tdat[idx, ]
dir = dataDir
files = list.files(dir, '*.xlsx', recursive = F, full.names = TRUE)
bnames = basename(files)
bnames = sub('.xlsx', '',bnames)
for(i in 1:length(files)){
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character",
"character", "character"),
stringsAsFactors=FALSE)
if(i == 1){
fallpop = tbl
} else{
fallpop = rbind(fallpop, tbl)
}
}
colnames(fallpop) <- c("SiteID", "Date", "FishNum", "Pass", "FL_mm", "Wt_g", "PITnum", "TagSize",
"DNAsamp", "Scales", "Recap","Species", "Notes")
# fallpop<-fallpop[!fallpop$SiteID=="" , ] #remove blank columns; thanks excel... not
# fallpop<-fallpop[!fallpop$SiteID==" " , ]
fallpop$DNAsamp <- fallpop$DNAsamp=="Y" | fallpop$DNAsamp=="T"
fallpop$Scales <- fallpop$Scales=="Y" | fallpop$Scales=="T"
fallpop$Recap <- fallpop$Recap=="Y" | fallpop$Recap=="T"
fallpop$Sex<-NA
fallpop$SiteTo<-NA
fallpop$TagSize <- as.integer(fallpop$TagSize)
fallpop$PITnum = as.character(sub(" ", "", fallpop[,"PITnum"])) # Remove space from PITnum
#... Clean up tag numbers
fallpop$PITnum[fallpop$PITnum=="NaN"] <- NA
fallpop$PITnum[fallpop$PITnum==""] <- NA
##... print first 6 lines of fall pop, confirm code is working
head(fallpop)
#... Bind with main data file
AFD <- rbind(AFD, fallpop)
##... print first 6 lines of AFD, confirm code is working
head(AFD)
#... Check for and return duplicates
Tdat <- filter(AFD, Recap==F, !is.na(PITnum)) #Non-recaps
dupTags <- Tdat[which(duplicated(Tdat$PITnum)==T) , ]
idx <- duplicated(Tdat$PITnum) | duplicated(Tdat$PITnum, fromLast = TRUE)
##... print the duplicates
Tdat[idx, ]
require(dplyr)
require(tidyverse)
require(lubridate)
require(xlsx)
# Main fish data file
AFD<-read_csv(dbDir, col_names = T,
col_types = cols(SiteID = "c", Date = col_date(), Pass = "d", FishNum = "d",
FL_mm = "d", Wt_g = "d", PITnum = "c", Recap = col_logical(),
TagSize = "i", DNAsamp = col_logical(), Notes = "c", SiteTo = "c",
Scales = "l", Species = "c", Sex = "c"))
# Compile new data
dir = dataDir
files = list.files(dir, '*.xlsx', recursive = F, full.names = TRUE)
bnames = basename(files)
bnames = sub('.xlsx', '',bnames)
for(i in 1:length(files)){
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character",
"character", "character"),
stringsAsFactors=FALSE)
if(i == 1){
fallpop = tbl
} else{
fallpop = rbind(fallpop, tbl)
}
}
colnames(fallpop) <- c("SiteID", "Date", "FishNum", "Pass", "FL_mm", "Wt_g", "PITnum", "TagSize",
"DNAsamp", "Scales", "Recap","Species", "Notes")
# fallpop<-fallpop[!fallpop$SiteID=="" , ] #remove blank columns; thanks excel... not
# fallpop<-fallpop[!fallpop$SiteID==" " , ]
fallpop$DNAsamp <- fallpop$DNAsamp=="Y" | fallpop$DNAsamp=="T"
fallpop$Scales <- fallpop$Scales=="Y" | fallpop$Scales=="T"
fallpop$Recap <- fallpop$Recap=="Y" | fallpop$Recap=="T"
fallpop$Sex<-NA
fallpop$SiteTo<-NA
fallpop$TagSize <- as.integer(fallpop$TagSize)
fallpop$PITnum = as.character(sub(" ", "", fallpop[,"PITnum"])) # Remove space from PITnum
#... Clean up tag numbers
fallpop$PITnum[fallpop$PITnum=="NaN"] <- NA
fallpop$PITnum[fallpop$PITnum==""] <- NA
##... print first 6 lines of fall pop, confirm code is working
head(fallpop)
#... Bind with main data file
AFD <- rbind(AFD, fallpop)
##... print first 6 lines of AFD, confirm code is working
head(AFD)
#... Check for and return duplicates
Tdat <- filter(AFD, Recap==F, !is.na(PITnum)) #Non-recaps
dupTags <- Tdat[which(duplicated(Tdat$PITnum)==T) , ]
idx <- duplicated(Tdat$PITnum) | duplicated(Tdat$PITnum, fromLast = TRUE)
##... print the duplicates
Tdat[idx, ]
functionsPath = "C:/Users/HaleyOhms/Documents/GitHub/CaRmel/FieldDuplicateTagCheck.r"
dbDir = "C:/Users/HaleyOhms/Documents/Carmel/DATA/Database/AllFishData.csv"
dataDir = "C:/Users/HaleyOhms/Documents/Carmel/Fieldwork docs/PopSurveyFieldCode"
# Main fish data file
AFD<-read_csv(dbDir, col_names = T,
col_types = cols(SiteID = "c", Date = col_date(), Pass = "d", FishNum = "d",
FL_mm = "d", Wt_g = "d", PITnum = "c", Recap = col_logical(),
TagSize = "i", DNAsamp = col_logical(), Notes = "c", SiteTo = "c",
Scales = "l", Species = "c", Sex = "c"))
# Compile new data
dir = dataDir
files = list.files(dir, '*.xlsx', recursive = F, full.names = TRUE)
bnames = basename(files)
bnames = sub('.xlsx', '',bnames)
for(i in 1:length(files)){
tbl = read.xlsx2(files[i], sheetIndex = 1, startRow = 1,
colClasses = c("character","Date", "numeric", "numeric", "numeric", "numeric",
"character","numeric", "character", "character", "character",
"character", "character"),
stringsAsFactors=FALSE)
if(i == 1){
fallpop = tbl
} else{
fallpop = rbind(fallpop, tbl)
}
}
colnames(fallpop) <- c("SiteID", "Date", "FishNum", "Pass", "FL_mm", "Wt_g", "PITnum", "TagSize",
"DNAsamp", "Scales", "Recap","Species", "Notes")
# fallpop<-fallpop[!fallpop$SiteID=="" , ] #remove blank columns; thanks excel... not
# fallpop<-fallpop[!fallpop$SiteID==" " , ]
fallpop$DNAsamp <- fallpop$DNAsamp=="Y" | fallpop$DNAsamp=="T"
fallpop$Scales <- fallpop$Scales=="Y" | fallpop$Scales=="T"
fallpop$Recap <- fallpop$Recap=="Y" | fallpop$Recap=="T"
fallpop$Sex<-NA
fallpop$SiteTo<-NA
fallpop$TagSize <- as.integer(fallpop$TagSize)
fallpop$PITnum = as.character(sub(" ", "", fallpop[,"PITnum"])) # Remove space from PITnum
#... Clean up tag numbers
fallpop$PITnum[fallpop$PITnum=="NaN"] <- NA
fallpop$PITnum[fallpop$PITnum==""] <- NA
##... print first 6 lines of fall pop, confirm code is working
head(fallpop)
#... Bind with main data file
AFD <- rbind(AFD, fallpop)
##... print first 6 lines of AFD, confirm code is working
head(AFD)
#... Check for and return duplicates
Tdat <- filter(AFD, Recap==F, !is.na(PITnum)) #Non-recaps
dupTags <- Tdat[which(duplicated(Tdat$PITnum)==T) , ]
idx <- duplicated(Tdat$PITnum) | duplicated(Tdat$PITnum, fromLast = TRUE)
##... print the duplicates
Tdat[idx, ]
